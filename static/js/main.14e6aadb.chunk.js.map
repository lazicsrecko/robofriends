{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","map","robot","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","children","App","useState","setRobots","searchfield","setSearchfield","useEffect","fetch","then","response","json","data","length","event","target","value","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAeeA,EAbF,SAACC,GAAW,IACbC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACI,sBAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAG,+BAA0BF,GAAMG,IAAI,WAC5C,gCACI,6BAAKL,IACL,4BAAIC,WCKLK,EAXE,SAACP,GAAW,IACjBQ,EAAWR,EAAXQ,OACR,OACI,8BACDA,EAAOC,KAAI,SAAAC,GACV,OAAO,cAAC,EAAD,CAAqBP,GAAIO,EAAMP,GAAIF,KAAMS,EAAMT,KAAMC,MAAOQ,EAAMR,OAAvDQ,EAAMP,UCQjBQ,EAdG,SAACX,GAAW,IAClBY,EAAmBZ,EAAnBY,eACR,OACI,qBAAKR,UAAU,MAAf,SACI,uBACIS,KAAK,YACLC,YAAY,gBACZV,UAAU,uCACVW,SAAUH,OCAXI,EARA,SAAChB,GACZ,OACI,qBAAKI,UAAU,SAAf,SACKJ,EAAMiB,YC0CJC,MAxCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNX,EADM,KACEY,EADF,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,KAyBb,OAlBAC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIR,EAAUQ,QACzB,IAcmB,IAAlBpB,EAAOqB,OACF,yCAGL,sBAAKzB,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWQ,eAAgB,SAAAkB,GAAK,OAAIR,EAAeQ,EAAMC,OAAOC,UAChE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUxB,OAnBOA,EAAOyB,QAAO,SAAAvB,GAAK,OAAIA,EAAMT,KAAKiC,cAAcC,SAASd,EAAYa,0BCTjFE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.14e6aadb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    const { name, email, id } = props;\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}`} alt=\"robots\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = (props) => {\n    const { robots } = props;\n    return (\n        <div>\n      {robots.map(robot => {\n        return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\n      })}\n    </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = (props) => {\n    const { onSearchChange } = props;\n    return (\n        <div className=\"pa2\">\n            <input \n                type=\"searchbox\"\n                placeholder=\"search robots\"\n                className=\"pa3 ba b--green bg-lightest-blue ttu\"\n                onChange={onSearchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div className=\"scroll\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'tachyons';\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchBox';\nimport Scroll from './components/Scroll';\n\nfunction App() {\n  const [robots, setRobots] = useState([]);\n  const [searchfield, setSearchfield] = useState('');\n\n\n  //Loads robots from API\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => setRobots(data));\n  }, []);\n\n  const filteredRobots = () => {\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchfield.toLowerCase()));\n    return filteredRobots;\n  }\n\n\n  // Filter out robots depends on user inputs\n  // useEffect(() => {\n  //   const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchfield.toLowerCase()));\n  //   setRobots(filteredRobots); \n  // },[searchfield]);\n\n  if (robots.length === 0) {\n    return <h1>Loading</h1>\n  } else {\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox onSearchChange={event => setSearchfield(event.target.value)} />\n        <Scroll>\n          <CardList robots={filteredRobots()} />\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}